import { useAuth } from '@/contexts/auth-context'
import { useEnhancedAIAssistant } from '@/contexts/enhanced-ai-assistant-context'
import { SupabaseReports } from '@/lib/supabase-reports'

export class FitnessAIIntegration {
  private supabaseReports: SupabaseReports

  constructor() {
    this.supabaseReports = new SupabaseReports()
  }

  // Generate fitness report with Supabase integration
  async generateAndSaveFitnessReport(
    userId: string,
    reportData: {
      title: string
      content: string
      category: 'fitness' | 'workout' | 'supplement' | 'health'
      tags: string[]
      userInfo: any
    }
  ) {
    try {
      const report = await this.supabaseReports.saveReport({
        user_id: userId,
        title: reportData.title,
        content: reportData.content,
        category: reportData.category,
        tags: reportData.tags,
        status: 'completed',
        metadata: {
          wordCount: reportData.content.split(' ').length,
          estimatedReadTime: Math.ceil(reportData.content.split(' ').length / 200),
          source: 'ai-fitness-assistant',
          userInfo: reportData.userInfo,
          createdAt: Date.now(),
          updatedAt: Date.now()
        }
      })

      return report
    } catch (error) {
      console.error('Error saving fitness report:', error)
      return null
    }
  }

  // Get user's fitness reports
  async getUserFitnessReports(userId: string) {
    return await this.supabaseReports.getReports(userId)
  }

  // Update existing fitness report
  async updateFitnessReport(reportId: string, userId: string, updates: any) {
    return await this.supabaseReports.updateReport(reportId, userId, updates)
  }

  // Delete fitness report
  async deleteFitnessReport(reportId: string, userId: string) {
    return await this.supabaseReports.deleteReport(reportId, userId)
  }

  // Scroll to section utility
  scrollToSection(sectionId: string) {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' })
      return true
    }
    return false
  }

  // Switch section mode utility
  switchSectionMode(sectionId: string, mode: 'info' | 'ai-generation') {
    window.dispatchEvent(new CustomEvent('switchSectionMode', {
      detail: { sectionId, mode }
    }))
  }

  // Show authentication modal
  showAuthModal() {
    window.dispatchEvent(new CustomEvent('showAuthModal'))
  }

  // Validate user authentication for AI features
  validateUserAuth(user: any) {
    if (!user) {
      this.showAuthModal()
      return false
    }
    return true
  }

  // Generate WhatsApp share link
  generateWhatsAppShareLink(reportTitle: string, reportContent: string) {
    const message = `Check out my personalized ${reportTitle} from SSN Fitness AI:\n\n${reportContent.substring(0, 200)}...\n\nGenerated by SSN Fitness - Your AI-powered fitness companion!`
    return `https://wa.me/?text=${encodeURIComponent(message)}`
  }

  // Generate PDF download (placeholder - would need PDF library)
  async generatePDFDownload(reportTitle: string, reportContent: string) {
    // This would integrate with a PDF generation library
    // For now, return a data URL with the content
    const blob = new Blob([reportContent], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    
    const a = document.createElement('a')
    a.href = url
    a.download = `${reportTitle.replace(/\s+/g, '_')}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }
}

// Singleton instance
export const fitnessAI = new FitnessAIIntegration()